searchState.loadedDescShard("ril", 0, "The Rust Imaging Library. A performant and high-level …\nA pair of absolute coordinates with accordance to the …\nRepresents a pixel that supports alpha, or transparency …\nThe bit depth of the pixel.\nDispose the current frame completely and replace it with …\nRepresents an image with multiple channels, called bands.\nA Catmull-Rom bicubic filter, which is the most common …\nA bilinear filter. Calculates output pixel value using …\nRepresents a single-bit pixel that represents either a …\nThe image is encoded in the BMP format.\nA boolean subpixel.\nRepresents a shape border.\nRepresents whether a border is inset, outset, or if it …\nThe y position is the bottom edge of the text.\nA box filter algorithm. Equivalent to the [<code>Nearest</code>] filter …\nThe color type of the pixel.\nA border that is balanced between the inside and outside …\nThe x position is the center of the text. This also …\nAligns the text to the center.\nThe y position is the center of the text.\nKeep as many characters per line as possible, and allow …\nThe resolved color type of the palette. This is <code>Self</code> for …\nRepresents an arbitrary color type. Note that this does …\nThe type of the configuration object used to configure …\nA conic gradient.\nThe iterator type this pixel uses.\nLow-level decoder interface around an image format.\nInvalid data was encountered when an image, usually …\nThe method used to dispose a frame before transitioning to …\nA common trait for all objects able to be drawn on an …\nRepresents a pixel type that is dynamically resolved.\nDynamic color type that can be used to store any color …\nRepresents a subpixel of a dynamic pixel.\nAn ellipse, which could be a circle.\nTried to encode an empty image, or an image without data. …\nLow-level encoder interface around an image format. …\nManually configured encoder metadata. This is used to …\nFailed to encode an image.\nContains the error value\nRepresents an error that occurs within the crate.\nLoops the specified amount of times.\nHandles the actual filling of a shape. See <code>IntoFill</code> for …\nThe fill type.\nRepresents a single font along with its alternatives used …\nAn error occured while trying to render or rasterize a …\nRepresents a frame in an image sequence. It encloses an …\nRepresents the lazy decoding of frames from an encoded …\nThe image is encoded in the GIF format.\nColor blending mode\nInterpolation mode\nRepresents where the center of a radial or conic gradient …\nWhile having similar performance as the [<code>Bilinear</code>] filter, …\nRepresents where text is anchored horizontally.\nA high-level image representation.\nRepresents the underlying encoding format of an image.\nRepresents a sequence of image frames such as an animated …\nAn image received data incompatible with the image’s …\nLoops infinitely.\nAn inset border. May overlap the contents of inside the …\nAny fill type that can be used to fill a shape, i.e. solid …\nAn invalid extension was provided when trying to resolve …\nAn invalid hex code was provided when trying to parse a …\nReceived an invalid palette index.\nAn error occured when trying to read a file or when trying …\nThe image is encoded in the JPEG format.\nRepresents an L, or luminance pixel that is stored as only …\nA single-channel pixel that holds one value, typically …\nA two-channel <code>L</code> pixel that holds an additional alpha …\nA Lanczos filter with a window of 3. Calculates output …\nThe x position is the left edge of the text. This is the …\nAligns the text to the left.\nA line.\nA linear gradient.\nSet the color stop at <code>1.0</code> to render at the end of the …\nDetermines how many times an image sequence should repeat …\nMerge the alpha values of overlay image with the alpha …\nA Mitchell-Netravali bicubic filter. Just like all cubic …\nA simple nearest neighbor algorithm. Although the fastest, …\nDo not dispose the current frame. Usually not desired for …\nDo not wrap the text.\nContains the success value\nAn outset border. May overlap the contents of outside the …\nThe behavior to use when overlaying images on top of each …\nA single-channel pixel that holds an index into a palette …\nA single-channel pixel that holds an index into a palette …\nA trait representing a paletted pixel. <code>Pixel::Subpixel</code> is …\nRepresents a paletted pixel, holding an index to a palette …\nRepresents a paletted pixel, holding an index to a palette …\nPastes or overlays an image on top of another image.\nRepresents any type of pixel in an image.\nThe pixel type of the fill.\nThe image is encoded in the PNG format.\nA polygon.\nDispose and replace the current frame with the previous …\nAttempted lossless quantization, but there are more unique …\nConfiguration options regarding behavior of quantization.\nA radial gradient.\nHow a radial gradient should cover its shape if the aspect …\nA rectangle.\nA pair of coordinates relative to the shape rendered, …\nReplace alpha values with the alpha values of the overlay …\nA filtering algorithm that is used to resize an image.\nA shortcut type equivalent to <code>Result&lt;T, ril::Error&gt;</code>.\nRepresents an RGB pixel.\nA three-channel pixel that holds red, green, and blue …\nRepresents an RGBA pixel.\nA four-channel pixel that holds red, green, blue, and …\nThe x position is the right edge of the text. This also …\nAligns the text to the right.\nThe type of the iterator returned by <code>decode_sequence</code>.\nSet the color stop at <code>1.0</code> to render at the end of the …\nRepresents a single static image wrapped in a frame …\nStretch the gradient. This is the default behavior.\nThe type of a single component in the pixel.\nRepresents how to align text horizontally within its …\nRepresents a high-level text layout that can layout text …\nRepresents a text segment that can be drawn.\nThe image is encoded in the TIFF format.\nIf upscaling, repeats the image in a tiling fashion to …\nThe y position is the top edge of the text. This is the …\nA trait representing all pixels that can be safely …\nA u8 subpixel.\nNo known encoding is known for the image.\nNo encoding format could be inferred for the given image.\nReceived an unsupported color type when trying to create a …\nRepresents where text is anchored vertically.\nThe image is encoded in the WebP format.\nKeep words together and do not break in the middle of …\nDetermines how text should be wrapped.\nThe alpha component of the pixel.\nAdds a frame to the encoding sequence and encodes it into …\nReturns the alpha, or opacity level of the pixel.\nThe angle of the gradient in radians. Defaults to 0 …\nThe angle of the conic gradient, in radians. Defaults to …\nWhether the line should be antialiased. Note that drawing …\nWhether to antialias the polygon’s edges.\nTurns this pixel into bytes.\nReturns this pixel as RGB despite its type. This can panic …\nReturns the pixel as an (r, g, b) tuple.\nReturns this pixel as RGBA despite its type. This can …\nReturns the pixel as an (r, g, b, a) tuple.\nThe blue component of the pixel.\nThe blue component of the pixel.\nTakes this image and returns its bands.\nThe bit depth of the pixels in the image.\nThe blending mode to use when rendering the gradient. …\nThe blending mode to use when rendering the gradient. …\nThe blending mode to use when rendering the gradient. …\nThe border of the polygon. Either this or <code>fill</code> must be <code>Some</code>…\nThe border data of the rectangle, or None if there is no …\nBrightens the image by increasing all pixels by the …\nTakes this image and brightens it by increasing all pixels …\nReturns the nearest pixel coordinates to the center of the …\nResolves the color of the pixel. Because invalid palette …\nThe color of the border.\nThe color of the line.\nResolves the color type of this pixel at runtime. This is …\nThe color type of the image.\nResolves the color of the pixel. Invalid palette values …\nA <code>Vec</code> of colors and their positions in the gradient, …\nA <code>Vec</code> of colors and their positions in the gradient, …\nA <code>Vec</code> of colors and their positions in the gradient, …\nConverts the image into an image with the given pixel type.\nHow the gradient should cover the bounding box.\nCrops this image in place to the given bounding box.\nTakes this image and crops it to the given box. Useful for …\nDarkens the image by decreasing all pixels by the …\nTakes this image and darkens it by decreasing all pixels …\nA 1-dimensional vector of pixels representing all pixels …\nDecodes the given stream into an image.\nDecodes the given stream into a frame iterator.\nReturns the dimensions of the image.\nEncloses most drawing implementations and drawable objects.\nDraws the object to the given image.\nDraws an object or shape onto this image.\nHouses Encoder, Decoder, and frame iterator traits.\nEncodes the image with the given encoding and writes it to …\nEncodes the given image sequence into the given writer.\nEncodes a static image into the given writer.\nContains encoder and decoder implementations for various …\nThe end point of the line.\nCommon error types.\nWhen attempting lossy quantization and this value is <code>true</code>, …\nThe fill color of the polygon. Either this or <code>border</code> must …\nThe fill color of the rectangle, or None if there is no …\nThe fill color the text will be in.\nFilters that can be applied on images.\nFinishes encoding the image. This <strong>must</strong> be called once …\nTakes this image and flattens this paletted image into an …\nFlips this image vertically (about the x-axis) in place.\nTakes this image and flips it vertically, or about the …\nThe font to use to render the text.\nReturns the encoding format of the image. This is nothing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates this pixel from the given palette and index, but …\nCreates a new image from the given bands.\nCreates this pixel from a raw bytes. This is used …\nDecodes an image with the explicitly given image encoding …\nDecodes an image from the given bytes, inferring its …\nCreates this pixel from any dynamic pixel, dynamically at …\nParses the given extension and returns the corresponding …\nCreates a new image with the given width and height. The …\nReturns the format specified by the given MIME type.\nCreates this pixel from the given palette and index. For …\nCreates a new image shaped with the given width and a …\nReturns the format specified by the given path.\nCreates a new image shaped with the given width and a …\nCreates this pixel from the given color type, bit depth, …\nCreates this pixel from the given color type, bit depth, …\nDecodes an image with the explicitly given image encoding …\nDecodes an image from the given read stream of bytes, …\nCreates an <code>Rgba</code> image from an <code>Rgb</code> image and an <code>L</code> image, …\nCreates a new pixel from an (r, g, b) tuple.\nCreates a new pixel from an (r, g, b, a) tuple.\nThe green component of the pixel.\nThe green component of the pixel.\nGets the color of the fill at the given coordinates.\nReturns a reference of the pixel at the given coordinates, …\nWhether to optimize the palette for GIF images.\nHandles rendering and logic of gradients.\nReturns the height of the image.\nThe height of the image.\nHue rotates the image by the specified amount of degrees …\nTakes this image and hue rotates it by the specified …\nA reference to the image to paste, or the foreground image.\nInfers the encoding format from the given data via a byte …\nThe interpolation mode to use when rendering the gradient. …\nThe interpolation mode to use when rendering the gradient. …\nThe interpolation mode to use when rendering the gradient. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the fill into a fill type.\nReturns the pixel casted into an Rgb pixel.\nReturns the pixel casted into an Rgba pixel.\nCollects all frames in this iterator and turns it into a …\nInverts this image in place.\nTakes this image and inverts it. Useful for method …\nReturns if there are no frames in the sequence. In this …\nReturns true if the image contains no pixels.\nReturns whether the extension is unknown.\nReturns the number of frames in the sequence.\nReturns the amount of pixels in the image.\nReturns the amount of times this sequence will loop over …\nThe luminance of the pixel.\nPerforms the given operation <code>f</code> on every pixel in the alpha …\nReturns the image replaced with the given data. It is up …\nSimilar to <code>Self::map_pixels_with_coords</code>, but this maps the …\nMaps the palette of this image using the given function. …\nReturns the image with each pixel in the image mapped to …\nReturns the image with the each pixel in the image mapped …\nPerforms the given operation <code>f</code> on every pixel in this …\nReturns the image with each row of pixels represented as a …\nMaps the pixel’s components and returns a new pixel with …\nA refrence to an image that masks or filters out pixels …\nMasks the alpha values of this image with the luminance …\nMerges this pixel with the given overlay pixel, taking …\nMerges this pixel with the given overlay pixel, where the …\nMirrors, or flips this image horizontally (about the …\nTakes this image and flips it horizontally (about the …\nThe overlay mode of the line, or None to inherit from the …\nCreates a new encoder and prepares it for encoding an …\nCreates a new image with the given width and height, with …\nOpens a file from the given path and decodes it into an …\nOverlays this pixel with the given overlay pixel, abiding …\nThe overlay mode of the polygon. If <code>None</code>, the image’s …\nThe overlay mode of the rectangle, or None to inherit from …\nThe overlay mode of the image, or None to inherit from the …\nThe overlay mode of the text. Note that anti-aliasing is …\nReturns the overlay mode of the image.\nOverlays the pixel at the given coordinates with the given …\nOverlays the pixel at the given coordinates with the given …\nOverlays the pixel at the given coordinates with the given …\nOverlays this pixel with the given overlay pixel, abiding …\nReturns the palette lookup as a slice.\nReturns the palette associated with this image as a slice. …\nThe palette of the image.\nReturns the index in the palette this pixel is of.\nReturns the palette associated with this image as a …\nReturns the palette associated with this image as a …\nThe maximum number of colors in the palette. Defaults to …\nReturns the palette associated with this image as a slice. …\nPastes the given image onto this image at the given x and …\nPastes the given image onto this image at the given x and …\nEncloses pixel-related traits and pixel type …\nReturns a reference of the pixel at the given coordinates.\nReturns a mutable reference to the pixel at the given …\nReturns an iterator of slices representing the pixels of …\nPlots the fill at the given coordinates on the given image.\nPlots the fill at the given coordinates on the given image …\nThe position of the border.\nThe position of the line relative to the start and end …\nThe position of the rectangle. The top-left corner of the …\nThe center position of the ellipse. The center of this …\nThe position of the image to paste.\nThe position of the center of the radial gradient (where …\nThe position of the center of the conic gradient. Defaults …\nThe position the text will be rendered at. Ignored if this …\nThe crate prelude exports. Importing this with a wildcard …\nThe quality of the output colors. If you plan on using a …\nQuantizes unpaletted pixel data to paletted data by …\nQuantizes this image using its colors and turns it into …\nThe red component of the pixel.\nThe red component of the pixel.\nThe radii of the ellipse, in pixels; (horizontal, …\nResizes this image in place to the given dimensions using …\nPerforms a resize operation on the given data.\nTakes this image and resizes this image to the given …\nRotates this image in place about its center. There are …\nRotates this image by 180 degrees in place.\nRotates this image by 270 degrees clockwise, or 90 degrees …\nRotates this image by 90 degrees clockwise, or 270 degrees …\nTakes the image and rotates it by the specified amount of …\nWhether the endpoints of the line should be “rounded off…\nWhether the border should be rounded off by drawing …\nIterates over each row of pixels in the image.\nDecodes the image data from into an image.\nEncodes the <code>Image</code> into raw bytes.\nDecodes the image sequence data into an image sequence.\nEncodes the <code>ImageSequence</code> into raw bytes. If the encoding …\nSaves the image with the given encoding to the given path. …\nSaves the image to the given path, inferring the encoding …\nImplements the animated image and image sequence interface.\nInformation regarding whether the image is static (not …\nSets the bounding box of the fill in place. This is used …\nSets the data of this image to the new data. This is used …\nSets the encoding format of this image. Note that when …\nSets the pixel at the given coordinates to the given pixel.\nThe dimensions of the rectangle, in pixels.\nThe size of the text in pixels.\nSplits this image into an <code>Rgb</code> image and an <code>L</code> image, where …\nThe start point of the line.\nImplements the font/text rasterizing and layout interface.\nThe content of the text segment.\nThe thickness of the border, in pixels.\nThe thickness of the line, in pixels. Defaults to 1.\nA <code>Vec</code> of vertices that make up the polygon. The vertices …\nReturns the width of the image.\nThe width of the image.\nThe width of the text box. If this is used in a <code>TextLayout</code>…\nTakes this image, draws the given object or shape onto it, …\nClones this pixel with the given alpha value.\nSets the overlay mode of the fill. This is used internally.\nReturns the same image with its overlay mode set to the …\nThe wrapping style of the text. Note that text will only …\nThe desired palette size.\nThe amount of unique colors in the image.\nRepresents a shape border.\nRepresents whether a border is inset, outset, or if it …\nA border that is balanced between the inside and outside …\nA common trait for all objects able to be drawn on an …\nAn ellipse, which could be a circle.\nAn inset border. May overlap the contents of inside the …\nA line.\nAn outset border. May overlap the contents of outside the …\nPastes or overlays an image on top of another image.\nA polygon.\nA rectangle.\nWhether the line should be antialiased. Note that drawing …\nWhether to antialias the polygon’s edges.\nCreates a new rectangle at the specified coordinates with …\nThe border of the polygon. Either this or <code>fill</code> must be <code>Some</code>…\nThe border data of the rectangle, or None if there is no …\nCreates a new circle with the given center position and …\nThe color of the border.\nThe color of the line.\nDraws the object to the given image.\nThe end point of the line.\nThe fill color of the polygon. Either this or <code>border</code> must …\nThe fill color of the rectangle, or None if there is no …\nCreates a new rectangle from two coordinates specified as …\nCreates a new ellipse from the given bounding box.\nCreates a new polygon with the given vertices.\nA reference to the image to paste, or the foreground image.\nIterates over the vertices in the polygon.\nIterates over the vertices in the polygon in mutable form. …\nA refrence to an image that masks or filters out pixels …\nThe overlay mode of the line, or None to inherit from the …\nCreates a new border with the given color and thickness.\nCreates a new line.\nCreates a new empty polygon.\nCreates a new rectangle with default values.\nCreates a new ellipse.\nCreates a new image paste with from the given image with …\nThe overlay mode of the polygon. If <code>None</code>, the image’s …\nThe overlay mode of the rectangle, or None to inherit from …\nThe overlay mode of the image, or None to inherit from the …\nThe position of the border.\nThe position of the line relative to the start and end …\nThe position of the rectangle. The top-left corner of the …\nThe center position of the ellipse. The center of this …\nThe position of the image to paste.\nAdds a vertex to the polygon in place.\nThe radii of the ellipse, in pixels; (horizontal, …\nCreates a regular polygon with the first point vertically …\nCreates a regular polygon with <code>n</code> sides centered at <code>center</code>, …\nWhether the endpoints of the line should be “rounded off…\nWhether the border should be rounded off by drawing …\nThe dimensions of the rectangle, in pixels.\nCreates a new square with side length <code>s</code> with the top-left …\nThe start point of the line.\nThe thickness of the border, in pixels.\nThe thickness of the line, in pixels. Defaults to 1.\nUpdates the polygon’s bounding box. This is …\nReturns a slice of the vertices in the polygon.\nA <code>Vec</code> of vertices that make up the polygon. The vertices …\nReturns a mutable slice of the vertices in the polygon.\nSets whether the line should be antialiased. If this is …\nSets whether to antialias the polygon’s edges. If set to …\nSets the border of the polygon.\nSets the border information of the rectangle.\nSets the border of the ellipse.\nSets the color of the line.\nSets the end coordinates of the line.\nSets the fill color of the polygon.\nSets the fill color of the rectangle.\nSets the fill color of the ellipse.\nSets the mask image to use. Currently this is only limited …\nSets the mask image to use. Currently this is only limited …\nSets the overlay mode of the line.\nSets the overlay mode of the polygon.\nSets the overlay mode of the rectangle.\nSets the overlay mode of the ellipse.\nSets the overlay mode of the image.\nSets the position of the border.\nSets the position of the line relative to the start and …\nSets the position of the rectangle.\nSets the position of the ellipse.\nSets the position of where to paste the image at. The …\nSets the radii of the ellipse in pixels.\nSets whether the line should be rounded.\nSets whether the border should be rounded.\nSets the size of the rectangle in pixels.\nSets the diameters of the ellipse in pixels.\nSets the start coordinates of the line.\nSets the thickness or width of the border.\nSets the thickness of the line.\nAdds a vertex to the polygon.\nThe type of the configuration object used to configure …\nLow-level decoder interface around an image format.\nLow-level encoder interface around an image format. …\nManually configured encoder metadata. This is used to …\nAn <code>EncoderMetadata</code> with additional configuration …\nRepresents the lazy decoding of frames from an encoded …\nThe type of the iterator returned by <code>decode_sequence</code>.\nRepresents a single static image wrapped in a frame …\nAdds a frame to the encoding sequence and encodes it into …\nThe bit depth of the pixels in the image.\nThe color type of the image.\nThe encoder configuration.\nDecodes the given stream into an image.\nDecodes the given stream into a frame iterator.\nEncodes the given image sequence into the given writer.\nEncodes a static image into the given writer.\nFinishes encoding the image. This <strong>must</strong> be called once …\nReturns the argument unchanged.\nThe height of the image.\nCalls <code>U::from(self)</code>.\nCollects all frames in this iterator and turns it into a …\nReturns if there are no frames in the sequence. In this …\nReturns the number of frames in the sequence.\nReturns the amount of times this sequence will loop over …\nThe encoder metadata.\nCreates a new encoder and prepares it for encoding an …\nCreate a new single static image frame iterator.\nCreates a new encoder metadata with default options given …\nThe palette of the image.\nInformation regarding whether the image is static (not …\nThe width of the image.\nSets the bit depth of the pixels in the image.\nSets the color type of the image.\nSets the configuration parameters for the specific encoder.\nAnticipates the frame count of the image.\nSets the height of the image.\nAnticipates the loop count of the image.\nSets the palette of the image.\nSets sequence information regarding the image.\nSets the width of the image.\nRepresents an arbitrary color type. Note that this does …\nDynamic color type that can be used to store any color …\nA single-channel pixel that holds one value, typically …\nA two-channel <code>L</code> pixel that holds an additional alpha …\nA single-channel pixel that holds an index into a palette …\nA single-channel pixel that holds an index into a palette …\nA three-channel pixel that holds red, green, and blue …\nA four-channel pixel that holds red, green, blue, and …\nReturns the number of channels in this color type.\nReturns whether this color type can have a dynamic alpha …\nA decoder for GIF images.\nA GIF encoder interface over <code>gif::Encoder</code>.\nOptions for encoding GIFs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new decoder that decodes from the given reader.\nCreates a new encoder with default settings.\nSets the speed of the encoder. Higher speeds come at the …\nA JPEG decoder interface over <code>jpeg_decoder::Decoder</code>.\nA JPEG encoder interface over <code>jpeg_encoder::Encoder</code>.\nJPEG encoder options.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new encoder with default settings.\nCreates a new decoder with the default settings.\nSets the quality of the encoded image. Must be between 0 …\nSets the quality of the encoded image. Should be between 0 …\nAdaptive filtering tries every possible filter for each …\nHigher compression level\nThe type and strength of applied compression.\nDefault level\nFast minimal compression\nThe byte level filter applied to scanlines to prepare them …\nA PNG decoder interface around <code>png::Decoder</code>.\nA PNG encoder interface around <code>png::Encoder</code>.\nPNG configuration options for <code>PngEncoder</code>.\nThe adaptive filter type to use.\nThe compression to use.\nThe filter type to use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nu8 -&gt; Self. Temporary solution until Rust provides a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new decoder with the default settings.\nCreates a new set of options with the default settings.\nSets the adaptive filter type to use.\nSets the compression level to use.\nSets the filter type to use.\nAn interface for decoding WebP images and animations.\nOptions for the WebP image encoder.\nAn interface for encoding WebP animations.\nAn interface for encoding static WebP images.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to use lossless encoding.\nCreate a new decoder that decodes into the given pixel …\nCreates a new WebP encoder that uses lossy encoding with a …\nImage quality to encode at. Larger values produce higher …\nSets whether to use lossless encoding.\nSets the quality to encode at.\nInvalid data was encountered when an image, usually …\nTried to encode an empty image, or an image without data. …\nFailed to encode an image.\nContains the error value\nRepresents an error that occurs within the crate.\nAn error occured while trying to render or rasterize a …\nAn image received data incompatible with the image’s …\nAn invalid extension was provided when trying to resolve …\nAn invalid hex code was provided when trying to parse a …\nReceived an invalid palette index.\nAn error occured when trying to read a file or when trying …\nContains the success value\nAttempted lossless quantization, but there are more unique …\nA shortcut type equivalent to <code>Result&lt;T, ril::Error&gt;</code>.\nNo encoding format could be inferred for the given image.\nReceived an unsupported color type when trying to create a …\nThe desired palette size.\nThe amount of unique colors in the image.\nHandles the actual filling of a shape. See <code>IntoFill</code> for …\nThe fill type.\nRepresents a fill that pulls pixels from an image.\nAny fill type that can be used to fill a shape, i.e. solid …\nThe pixel type of the fill.\nRepresents a solid color fill.\nReturns a the color (represented as a <code>Pixel</code>) of the fill.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the color of the fill at the given coordinates.\nReturns a reference to the host image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the fill into a fill type.\nCreates a new solid fill.\nCreates a new image fill from the given image.\nPlots the fill at the given coordinates on the given image.\nPlots the fill at the given coordinates on the given image …\nSets the bounding box of the fill in place. This is used …\nSets the overlay mode of the fill. This is used internally.\nA brightness filter.\nAn image filter than can be lazily applied to an image or …\nThe pixel type of the input image.\nA filter which applies the given filter only to the given …\nThe pixel type of the output image.\nApplies the filter to the given image.\nApplies the filter to the given pixel.\nThe brightness adjustment factor, between -1.0 and 1.0.\nThe filter to apply.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe mask to apply the filter to.\nCreates a new brightness filter.\nA pair of absolute coordinates with accordance to the …\nColor blending mode\nA shorthand for <code>Relative(0.5, 0.5)</code>.\nA conic gradient.\nA conic gradient fill.\nRepresents where the center of a radial or conic gradient …\nInterpolation mode\nA linear gradient.\nSet the color stop at <code>1.0</code> to render at the end of the …\nA radial gradient.\nHow a radial gradient should cover its shape if the aspect …\nA pair of coordinates relative to the shape rendered, …\nSet the color stop at <code>1.0</code> to render at the end of the …\nStretch the gradient. This is the default behavior.\nThe angle of the gradient in radians. Defaults to 0 …\nThe angle of the conic gradient, in radians. Defaults to …\nThe blending mode to use when rendering the gradient. …\nThe blending mode to use when rendering the gradient. …\nThe blending mode to use when rendering the gradient. …\nA <code>Vec</code> of colors and their positions in the gradient, …\nA <code>Vec</code> of colors and their positions in the gradient, …\nA <code>Vec</code> of colors and their positions in the gradient, …\nHow the gradient should cover the bounding box.\nExtends the colors of this gradient with those specified …\nExtends the colors of this gradient with those specified …\nExtends the colors of this gradient with those specified …\nExtends the colors and positions of this gradient with …\nExtends the colors and positions of this gradient with …\nExtends the colors and positions of this gradient with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe interpolation mode to use when rendering the gradient. …\nThe interpolation mode to use when rendering the gradient. …\nThe interpolation mode to use when rendering the gradient. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>LinearGradient</code> with default settings.\nCreates a new empty radial gradient.\nCreates a new conic gradient.\nThe position of the center of the radial gradient (where …\nThe position of the center of the conic gradient. Defaults …\nAdds a color to the gradient, automatically calculating …\nAdds a color to the gradient, automatically calculating …\nAdds a color to the gradient, automatically calculating …\nAdds a color to the gradient at the specified position in …\nAdds a color to the gradient at the specified position in …\nAdds a color to the gradient at the specified position in …\nSets the angle of the gradient in <strong>radians</strong>. Angles outside …\nSets the angle of the gradient in <strong>radians</strong>. Angles outside …\nA shortcut method to set the angle of the gradient in …\nA shortcut method to set the angle of the gradient in …\nSets the blending mode to use when rendering the gradient.\nSets the blending mode to use when rendering the gradient.\nSets the blending mode to use when rendering the gradient.\nTakes this gradient and adds a color to the gradient, …\nTakes this gradient and adds a color to the gradient, …\nTakes this gradient and adds a color to the gradient, …\nTakes this gradient and adds a color to the gradient at …\nTakes this gradient and adds a color to the gradient at …\nTakes this gradient and adds a color to the gradient at …\nSets how the gradient should cover the bounding box.\nSets the end color of the gradient. This will be rendered …\nSets the end color of the gradient. This will be rendered …\nSets the end color of the gradient. This will be rendered …\nSets the interpolation mode to use when rendering the …\nSets the interpolation mode to use when rendering the …\nSets the interpolation mode to use when rendering the …\nSets the position of the center of the radial gradient …\nSets the position of the center of the gradient.\nSets the start color of the gradient. This will be …\nSets the start color of the gradient. This will be …\nSets the start color of the gradient. This will be …\nRepresents a pixel that supports alpha, or transparency …\nThe bit depth of the pixel.\nRepresents a single-bit pixel that represents either a …\nA boolean subpixel.\nThe color type of the pixel.\nThe resolved color type of the palette. This is <code>Self</code> for …\nThe iterator type this pixel uses.\nRepresents a pixel type that is dynamically resolved.\nRepresents a subpixel of a dynamic pixel.\nRepresents an L, or luminance pixel that is stored as only …\nRepresents a pixel that can be modulated, i.e. transformed …\nA pixel type that does and stores nothing. This pixel type …\nExtension of <code>NoOp</code>, used for internal purposes only. This …\nA trait representing a paletted pixel. <code>Pixel::Subpixel</code> is …\nRepresents a paletted pixel, holding an index to a palette …\nRepresents a paletted pixel, holding an index to a palette …\nRepresents any type of pixel in an image.\nRepresents an RGB pixel.\nRepresents an RGBA pixel.\nThe type of a single component in the pixel.\nA trait representing all pixels that can be safely …\nA u8 subpixel.\nThe alpha component of the pixel.\nReturns the alpha, or opacity level of the pixel.\nTurns this pixel into bytes.\nReturns this pixel as RGB despite its type. This can panic …\nReturns the pixel as an (r, g, b) tuple.\nReturns this pixel as RGBA despite its type. This can …\nReturns the pixel as an (r, g, b, a) tuple.\nThe blue component of the pixel.\nThe blue component of the pixel.\nCreates a completely black pixel.\nCreates an opaque black pixel.\nResolves the color of the pixel. Because invalid palette …\nResolves the color type of this pixel at runtime. This is …\nResolves the color of the pixel. Invalid palette values …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates this pixel from the given palette and index, but …\nCreates this pixel from a raw bytes. This is used …\nCreates this pixel from any dynamic pixel, dynamically at …\nParses an RGB pixel from a hex value.\nParses an RGBA pixel from a hex value.\nCreates this pixel from the given palette and index. For …\nCreates a new dynamic pixel…dynamically, from a concrete …\nCreates this pixel from the given color type, bit depth, …\nCreates this pixel from the given color type, bit depth, …\nCreates an opaque pixel from an RGB pixel.\nCreates a new pixel from an (r, g, b) tuple.\nCreates a new pixel from an (r, g, b, a) tuple.\nThe green component of the pixel.\nThe green component of the pixel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the pixel casted into an Rgb pixel.\nReturns the pixel casted into an Rgba pixel.\nThe luminance of the pixel.\nMaps the pixel’s components and returns a new pixel with …\nMerges this pixel with the given overlay pixel, taking …\nMerges this pixel with the given overlay pixel, where the …\nModulates this pixel with the given hue, saturation, and …\nReturns a new <code>BitPixel</code> with the given value.\nCreates a new L pixel with the given luminance value.\nCreates a new RGB pixel.\nCreates a new RGBA pixel.\nReturns a new <code>BitPixel</code> that is off.\nReturns a new <code>BitPixel</code> that is on.\nOverlays this pixel with the given overlay pixel, abiding …\nOverlays this pixel with the given overlay pixel, abiding …\nReturns the palette lookup as a slice.\nReturns the index in the palette this pixel is of.\nThe red component of the pixel.\nThe red component of the pixel.\nCreates a completely transparent pixel.\nReturns the value of the pixel.\nReturns the luminance value of the pixel.\nCreates a completely white pixel.\nCreates an opaque white pixel.\nClones this pixel with the given alpha value.\nColor blending mode\nInterpolation mode\nConfiguration options regarding behavior of quantization.\nWhen attempting lossy quantization and this value is <code>true</code>, …\nWhether to optimize the palette for GIF images.\nCreates a new [<code>QuantizerConfig</code>] with default settings.\nThe maximum number of colors in the palette. Defaults to …\nThe quality of the output colors. If you plan on using a …\nQuantizes the given pixels to a palette of the given size. …\nQuantizes an image using the NeuQuant algorithm.\nQuantize an image with under 256 colors, panics otherwise. …\nSets whether to fallback to a lossless quantization …\nSets whether to optimize the palette for GIF images.\nSets the maximum number of colors in the palette.\nSets the quality of the output colors. If you plan on …\nDispose the current frame completely and replace it with …\nThe method used to dispose a frame before transitioning to …\nLoops the specified amount of times.\nRepresents a frame in an image sequence. It encloses an …\nRepresents a sequence of image frames such as an animated …\nLoops infinitely.\nDetermines how many times an image sequence should repeat …\nDo not dispose the current frame. Usually not desired for …\nDispose and replace the current frame with the previous …\nReturns the exact number of times this loop should be …\nReturns the delay duration for this frame.\nReturns the disposal method for this frame.\nEncodes this image sequence with the given encoding and …\nExtends frames from the given iterator.\nReturns a reference to the first frame in the image …\nReturns a mutable reference to the first frame in the …\nReturns a reference to the first frame in the image …\nReturns a mutable reference to the first frame in the …\nDecodes an image sequence with the explicitly given image …\nDecodes an image sequence from the given byte slice, …\nCreates a new image sequence from the given frames.\nCreates a new frame with the given image and default …\nDecodes the image sequence with the explicitly given image …\nDecodes an image sequence from the given read stream of …\nReturns a reference to the image this frame contains.\nReturns a mutable reference to the image this frame …\nConsumes this image sequence and returns the first image.\nConsumes this image sequence and returns the frames it …\nConsumes this frame returning the inner image it …\nReturns whether there are no frames in the image sequence. …\nIterates through the frames in this image sequence by …\nIterates through the frames in this image sequence by …\nReturns the number of frames in this image sequence.\nReturns how many times this image sequence loops for.\nSets the exact number of loops this image sequence loops …\nSets the image sequence to loop infinitely.\nMaps the inner image to the given function.\nCreates a new image sequence with no frames.\nOpens a file from the given path and decodes it, returning …\nAdds a new frame to this image sequence.\nSaves the image sequence with the given encoding to the …\nSaves the image sequence to the given path, inferring the …\nSets the frame delay to the given duration in place.\nSets the disposal method for this frame in place.\nSets how many times this image sequence loops for in place.\nTakes this frame and sets the frame delay to the given …\nTakes this frame and sets the disposal method for this …\nAdds a new frame to this image sequence and returns this …\nTakes this image and sets how many times this image …\nThe y position is the bottom edge of the text.\nThe x position is the center of the text. This also …\nAligns the text to the center.\nThe y position is the center of the text.\nKeep as many characters per line as possible, and allow …\nRepresents a single font along with its alternatives used …\nRepresents where text is anchored horizontally.\nThe x position is the left edge of the text. This is the …\nAligns the text to the left.\nDo not wrap the text.\nThe x position is the right edge of the text. This also …\nAligns the text to the right.\nRepresents how to align text horizontally within its …\nRepresents a high-level text layout that can layout text …\nRepresents a text segment that can be drawn.\nThe y position is the top edge of the text. This is the …\nRepresents where text is anchored vertically.\nKeep words together and do not break in the middle of …\nDetermines how text should be wrapped.\nReturns the bounding box of the text. Left and top bounds …\nSets the horizontal anchor and vertial anchor of the text …\nReturns the width and height of the text. This is a …\nThe fill color the text will be in.\nThe font to use to render the text.\nLoads the font from the given byte slice. Useful for the …\nLoads the font from the given byte reader. See [<code>from_bytes</code>]…\nReturns the height of the text.\nReturns a reference the <code>fontdue::Font</code> object associated …\nConsumes this font and returns the <code>fontdue::Font</code> object …\nCreates a new text layout with default settings.\nCreates a new text segment with the given text, font, and …\nOpens the font from the given path.\nReturns the optimal size, in pixels, of this font.\nThe overlay mode of the text. Note that anti-aliasing is …\nThe position the text will be rendered at. Ignored if this …\nAdds basic text to the text layout. This is a convenience …\nAdds a text segment to the text layout.\nThe size of the text in pixels.\nThe content of the text segment.\nReturns the width of the text. This is a slightly …\nThe width of the text box. If this is used in a <code>TextLayout</code>…\nSets the horizontal text alignment. This determines how …\nTakes this text layout and returns it with the given basic …\nSets the horizontal anchor of the text. The horizontal …\nSets the overlay mode of the text segment.\nSets the position of the text layout.\nSets the position of the text segment. Ignored if this …\nTakes this text layout and returns it with the given text …\nSets the size of the text segment.\nSets the vertical anchor of the text. The vertical anchor …\nSets the wrapping width of the text. This does not impact …\nSets the width of the text segment, used for text wrapping.\nSets the wrapping style of the text. Make sure to also set …\nSets the wrapping style of the text segment. If this is …\nThe wrapping style of the text. Note that text will only …")